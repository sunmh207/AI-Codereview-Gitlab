#服务端口
SERVER_PORT=5001

#Timezone
TZ=Asia/Shanghai

#大模型供应商配置,支持 deepseek, openai,zhipuai,qwen 和 ollama
LLM_PROVIDER=deepseek

#DeepSeek settings
DEEPSEEK_API_KEY=
DEEPSEEK_API_BASE_URL=https://api.deepseek.com
DEEPSEEK_API_MODEL=deepseek-chat

#OpenAI settings
OPENAI_API_KEY=xxxx
OPENAI_API_BASE_URL=https://api.openai.com/v1
OPENAI_API_MODEL=gpt-4o-mini

#ZhipuAI settings
ZHIPUAI_API_KEY=xxxx
ZHIPUAI_API_MODEL=GLM-4-Flash

#Qwen settings
QWEN_API_KEY=sk-xxx
QWEN_API_BASE_URL=https://dashscope.aliyuncs.com/compatible-mode/v1
QWEN_API_MODEL=qwen-coder-plus

#OllaMA settings; 注意: 如果使用 Docker 部署，127.0.0.1 指向的是容器内部的地址。请将其替换为实际的 Ollama服务器IP地址。
#OLLAMA_API_BASE_URL=http://127.0.0.1:11434
OLLAMA_API_BASE_URL=http://host.docker.internal:11434
OLLAMA_API_MODEL=deepseek-r1:latest

#支持review的文件类型
SUPPORTED_EXTENSIONS=.c,.cc,.cpp,.cs,.css,.cxx,.go,.h,.hh,.hpp,.hxx,.java,.js,.jsx,.md,.php,.py,.sql,.ts,.tsx,.vue,.yml
#每次 Review 的最大 Token 限制（超出部分自动截断）
REVIEW_MAX_TOKENS=10000
#Review 风格选项：professional（专业） | sarcastic（毒舌） | gentle（温和） | humorous（幽默）
REVIEW_STYLE=professional

# 批量审查配置
# 是否启用批量审查功能（1=启用，0=禁用，使用传统一次性审查）
BATCH_REVIEW_ENABLED=1
# 每批次审查的文件数量（建议1-5，设置为1表示每个文件单独审查后汇总）
BATCH_REVIEW_FILES_PER_BATCH=3

#钉钉配置
DINGTALK_ENABLED=0
DINGTALK_WEBHOOK_URL=https://oapi.dingtalk.com/robot/send?access_token=xxx

#企业微信配置
WECOM_ENABLED=0
WECOM_WEBHOOK_URL=https://qyapi.weixin.qq.com/cgi-bin/webhook/send?key=xxx

#飞书配置
FEISHU_ENABLED=0
FEISHU_WEBHOOK_URL=https://open.feishu.cn/open-apis/bot/v2/hook/xxx

#自定义webhook配置，使用场景：通过飞书发送应用消息可以实现Push评审通知到提交人，在自定义webhook里可以实现各种定制通知功能
#参数EXTRA_WEBHOOK_URL接收POST请求，data={ai_codereview_data: {}, webhook_data: {}}，ai_codereview_data为本系统通知的数据，webhook_data为原github、gitlab hook触发的数据
EXTRA_WEBHOOK_ENABLED=0
EXTRA_WEBHOOK_URL=https://xxx/xxx

#日志配置
LOG_FILE=log/app.log
LOG_MAX_BYTES=10485760
LOG_BACKUP_COUNT=3
LOG_LEVEL=DEBUG

#工作日报发送时间
REPORT_CRONTAB_EXPRESSION=0 18 * * 1-5

#Gitlab配置
#GITLAB_URL={YOUR_GITLAB_URL} #部分老版本Gitlab webhook不传递URL，需要开启此配置，示例：https://gitlab.example.com
#GITLAB_ACCESS_TOKEN={YOUR_GITLAB_ACCESS_TOKEN} #系统会优先使用此GITLAB_ACCESS_TOKEN，如果未配置，则使用Webhook 传递的Secret Token

#Github配置(如果使用 Github 作为代码托管平台，需要配置此项)
#GITHUB_ACCESS_TOKEN={YOUR_GITHUB_ACCESS_TOKEN}

# 开启Push Review功能(如果不需要push事件触发Code Review，设置为0)
PUSH_REVIEW_ENABLED=1
# 开启Merge请求过滤，过滤仅当合并目标分支是受保护分支时才Review(开启此选项请确保仓库已配置受保护分支protected branches)
MERGE_REVIEW_ONLY_PROTECTED_BRANCHES_ENABLED=0

# Dashboard登录用户名和密码
DASHBOARD_USER=admin
DASHBOARD_PASSWORD=admin

# queue (async, rq)
QUEUE_DRIVER=async
# REDIS_HOST=redis
# REDIS_HOST=127.0.0.1
# REDIS_PORT=6379

# gitlab domain slugged
WORKER_QUEUE=git_test_com
